trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release-pipeline'

schedules:
- cron: '0 3 * * *'
  displayName: 'Deploy every day at 3 A.M.'
  branches:
    include:
    - release
  always: false 

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool: MultiStage Pipeline

    variables:
      wwwrootDir: 'WebApp/wwwroot'
      dotnetSdkVersion: '6.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
    )
  jobs:
  - deployment: Deploy
    pool: MultiStage Pipeline
    environment: dev
    variables:
    - group: Production Test
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          

- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: Dev
  condition: eq(variables['Build.Reason'], 'Schedule')
  jobs:
  - deployment: Deploy
    pool: MultiStage Pipeline
    environment: test
    variables:
    - group: 'Production Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
         
- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: Test
  jobs:
  - deployment: Deploy
    pool: MultiStage Pipeline
    environment: staging
    variables:
    - group: 'Production Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

- stage: 'Production'
  displayName: 'Production Migration Test'
  dependsOn: Staging
  jobs:
  - deployment: 'Migrate to Prod'
    pool : MultiStage Pipeline
    environment: production 
    variables: 
     AppType: 'IISWebsite'
     AppName: 'WebApp'
     AppPool: 'IISPool'
     PhysicalPath: '--'
     VirtualPath: '--'
     Binding: '8080'
     VirtualApplication: 'AspNetDemo'

     strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: IISWebAppManagementOnMachineGroup@0
            displayName: 'IIS Web App Prod Deployment'
            inputs:
              IISDeploymentType: '$(Parameters.IISWebsite)'
              ActionIISWebsite: '$(Parameters.ActionIISWebsite)'
              WebsiteName: '$(Parameters.WebApp)'
              WebsitePhysicalPath: '$(Parameters.PhysicalPath)'
              AddBinding: $(Parameters.Binding)
              ParentWebsiteNameForVD: '$(Parameters.WebsiteName)'
              VirtualPathForVD: '$(Parameters.VirtualPath)'
              AppPoolName: '$(Parameters.AppPool)'

          - task: IISWebAppDeploymentOnMachineGroup@0
            displayName: 'IIS Web App Production Deploy'
            inputs:
              WebSiteName: '$(Parameters.WebAPP)'
              VirtualApplication: '$(Parameters.VirtualApplication)'
              Package: '$(Parameters.Package)'